@page "/weather"

@using Microsoft.AspNetCore.WebUtilities
@using WeatherApp.Client.Services;
@using WeatherApp.Shared.Models
@using WeatherApp.Shared.OpenWeatherAPIParser;
@inject NavigationManager _navManager
@inject HttpClient _http

<div class="d-flex flex-column w-100 vh-100 bg-black">
	<h2 class="bg-secondary text-white m-0">Weather Forecasts</h2>
	<div class="d-flex flex-column p-3 m-4 overflow-auto h-100">
		<div id="tab-buttons">
			<button class="btn btn-primary" onclick="@(()=>TabButtonHandler("tab-current"))">Current</button>
			<button class="btn btn-primary" onclick="@(()=>TabButtonHandler("tab-minutely"))">Next Hour</button>
			<button class="btn btn-primary" onclick="@(()=>TabButtonHandler("tab-hourly"))">Hourly</button>
			<button class="btn btn-primary" onclick="@(() => TabButtonHandler("tab-10day"))">7-day</button>
		</div>
		<div class="bg-white h-75 overflow-auto flex-grow-1">
			<div class="">
				<div id="current-forecast" class=@(_tabDisplayed == "tab-current" ? "container d-flex" : "d-none")>
					<ForecastCurrentComponent Forecast=@(this.ForecastData.Current) />
				</div>

				<div class=@(_tabDisplayed == "tab-minutely" ? "container d-flex" : "d-none")>
					<ForecastMinutelyComponent Forecast=@(this.ForecastData.Minutely) />
				</div>

				<div class=@(_tabDisplayed == "tab-hourly" ? "container d-flex" : "d-none")>
					<ForecastHourlyComponent Forecast=@(this.ForecastData.Hourly) />
				</div>

				<div class=@(_tabDisplayed == "tab-10day" ? "container d-flex" : "d-none")>
					<ForecastDailyComponent Forecast=@(this.ForecastData.Daily) />
				</div>
			</div>
		</div>
	</div>

</div>


@code {
	[Parameter]
	[SupplyParameterFromQuery(Name = "lat")]
	public double Latitude { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "lon")]
	public double Longitude { get; set; }

	public Forecast? ForecastData { get; set; }

	private string _tabDisplayed = "tab-current";

	private void TabButtonHandler(string element)
	{
		_tabDisplayed = element;
	}

	private async Task<string> GetForecast()
	{
		var response = await _http.PostAsJsonAsync("api/v1/weather/forecast", new Coordinates(this.Latitude, this.Longitude));
		string result = response.Content.ReadAsStringAsync().Result;
		return result;
	}

	protected override async Task OnInitializedAsync()
	{
		string forecastJson = await this.GetForecast();
		this.ForecastData = OpenWeatherParser.ParseOneCallForecast(forecastJson);
		StateHasChanged();
	}
}
